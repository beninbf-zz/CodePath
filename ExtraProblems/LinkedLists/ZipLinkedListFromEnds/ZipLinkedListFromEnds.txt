Zip Given Linked List From Ends



Problem Statement:



Given an integer singly linked list L of size n, zip it from its two ends.



What does zipping mean?



Given a singly linked list L: L1 -> L2 ->… -> Ln-1 -> Ln -> NULL, rearrange the nodes in the list so that the new formed linked list is :

L1 -> Ln -> L2 -> Ln-1 -> L3 -> Ln-2 …



You have to do it in-place i.e. in the same linked list given in input, using only constant extra space.



(Looking at the sample test case will make it more clear.)



Input/Output Format For The Function:



Input Format:



There is only one argument in input, denoting integer singly linked list L.



Output Format:



Return zipped linked list resL.



Input/Output Format For The Custom Input:



Input Format:



The first line of input should contain an integer n, denoting size of input linked list L. In next n lines, ith line should contain an integer Li, denoting value in ith node of L.



If n = 6 and L: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> NULL, then input should be:



6

1

2

3

4

5

6



Output Format:



There will be n lines, where ith line contains value of ith node of resL. Here, resL is the resultant linked list returned by the solution function.



For input n = 6 and L: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> NULL, output will be:



1

6

2

5

3

4



Constraints:

0 <= n <= 100000
-2 * 10^9 <= value stored in any node <= 2 * 10^9


Sample Test Case:



Sample Input:



1 -> 2 -> 3 -> 4 -> 5 -> 6 -> NULL



Sample Output:



1 -> 6 -> 2 -> 5 -> 3 -> 4 -> NULL



(Other modification to try yourself for practice: zip two separate lists and unzip them back into original lists. i.e. unzip(zip(L1, L2)) should return L1 and L2.)