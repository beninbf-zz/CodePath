We have provided a solution which contains necessary comments to understand the approach used:



optimal_solution.java



Description:



The idea is to consider the given board as a graph. Each cell has 4 neighbors, top, bottom, left and right. We cannot go to a wall neighbor.



If we have only one guard then the problem becomes a straight-forward problem for BFS. We will put that guard in the queue at the start and keep running breadth-first search and denote the distance to all the cells from that guard. Places which cannot be reached will be marked -1.



When there are more than one guards, we run a multi-source BFS. In multi-source breadth-first search, we add all the guards to the queue at the start with 0 distance. Then with every move to the neighbor, we add 1 to the original distance of the respective guard. We keep on storing the minimum distance of that cell from the guard when we reach a cell first time.



For better understanding of multi source concept:

https://www.geeksforgeeks.org/multi-source-shortest-path-in-unweighted-graph/



Time Complexity (assuming that input arguments are already given and excluding time used in the declaration of output):



O(n * m) where n denotes the number of rows of the grid and m denotes the number of columns of the grid.



As we are iterating complete grid twice. Once while checking possible guards and adding them in the queue. And second time while calculating distances with the help of queue as we are maintaining visited 2d array to avoid visiting already visited indices. Hence total complexity will be 2 * O(n * m) → O(n * m).



Time Complexity:



O(n * m) where n denotes the number of rows of the grid and m denotes the number of columns of the grid.



As time complexity assuming that input arguments are already given and excluding time used in the declaration of output is O(n * m), for reading input it will take O(n * m) as we are reading grid of size n * m, for declaration of output it will take O(n * m) as we are initializing a 2d array of integers of size n * m. Hence, total time complexity will be 3 * O(n * m) → O(n * m).



Auxiliary Space Used:



O(n * m) where n denotes the number of rows of the grid and m denotes the number of columns of the grid.



As we are maintaining visited 2d array to avoid visiting already visited indices, space to store it will take O(n * m) and in worst case (when all are guards) queue will have n*m elements hence space for that will be O(n * m). Hence, the total auxiliary space used will be 2 * O(n * m) → O(n * m).



Space Complexity:



O(n * m) where n denotes the number of rows of the grid and m denotes the number of columns of the grid.



To store input, it will take O(n * m) as we are storing grid of size n * m, auxiliary space used is O(n * m), space for output will be O(n * m) hence 3 * O(n * m) → O(n * m).