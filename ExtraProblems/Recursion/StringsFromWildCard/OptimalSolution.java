/**
 * *********************** PROBLEM DESCRIPTION ***************************
 * You are given string s of length n, having m WildCard characters '?', where each WildCard character represent
 * a single character. Write a program which returns all possible distinct strings valStr that can be generated by
 * replacing each WildCard characters in s with either a '0' or '1'.
 * Note that valStr doesn't contain any '?'
 */
import java.io.*;
import java.util.*;

class Result {

    // -------------------- START ----------------------
    static char possibleChars[] = {'0', '1'};

    static String[] find_all_possibilities(String s) {
        int n = s.length();
        char[] input = s.toCharArray();
        char[] current = new char[n];
        List<String> allStrings = new ArrayList<>();
        // Call recursive function to generate valid strings
        generate(allStrings, input, current, 0);
        int count = allStrings.size();
        String result[] = new String[count];
        for(int i = 0; i < count; i++){
            result[i] = allStrings.get(i);
        }
        return result;
    }

    public static void generate(List<String> allStrings, char[] input, char[] current, int start) {
        /*
         * Recursive function to generate all possible strings by replacing '?' with '1' and '0'.
         */
        if (start == input.length) {
            allStrings.add(new String(current));
            return;
        }
        // If found '?' then call recursive function by replacing '?' with '1' and then with '0'.
        if (input[start] == '?') {
            for (char c : possibleChars) {
                current[start] = c;
                generate(allStrings, input, current, start + 1);
            }
        } 
        else {
            // If found non '?' character then continue with setting current character as that character and continue
            current[start] = input[start];
            generate(allStrings, input, current, start + 1);
        }

    }

    // -------------------- END ----------------------
}

class Solution{
    public static void main(String args[]) {
        /*
        This function is used to increase the size of recursion stack. It makes the size of stack
        2^26 ~= 10^8
        */
        new Thread(null, new Runnable() {
            public void run() {
                try{
                    solve();
                }
                catch(Exception e){
                    e.printStackTrace();
                }
            }
        }, "1", 1 << 26).start();
    }
    public static void solve() throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(System.out));

        String s = bufferedReader.readLine().trim();

        String result[] = Result.find_all_possibilities(s);
        for (String str: result) {
            bufferedWriter.write(str+"\n");
        }

        bufferedWriter.close();

        bufferedReader.close();
    }

}

/**
 * Time complexity: O(n*(2^m))
 * Space complexity: O(n*(2^m))
 */

