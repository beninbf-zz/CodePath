We have provided solutions which contain necessary comments to understand the approach used:



1) brute_force_solution.java



Description:



A naive approach would be that iterating over inputArray,

For 0<=i<=n-1, Check if inputArray[i] is a removed interval.

If it’s a removed interval continue.
If it's not a removed interval, compare inputArray[i] with all other intervals for overlapping. Let say it overlaps with interval inputArray[k], then remove inputArray[k] from array and merge it into the inputArray[i].


For removing an interval from array, one way is to make the interval invalid (i.e. start>end), so that later we can

check if it is removed or not. See implementation for better understanding.



Time Complexity:



O(n*n) where n is length of inputArray.



As we have to iterate entire input interval array for each interval, time complexity will be O(n*n).



Auxiliary Space Used:



O(1).



Here, all updation can be done in inputArray only. So, no extra space is used.



Space Complexity:



O(n) where n is length of inputArray.



For inputArray, it takes O(n) and auxiliary space used is O(1). So, O(n) + O(1) → O(n).



2) other_solution.java



Description:



An efficient approach would be as follows:

Sort the interval array in increasing order of start point. Once we have sorted intervals, we can combine all intervals in a linear traversal.

Following is the detailed step by step algorithm.

Sort the intervals based on increasing order of starting time.
Push the first interval on to a stack.
For each interval do the following
If the current interval does not overlap with the stack top, push it.
If the current interval overlaps with stack top and ending time of current interval is more than that of stack top, update stack top with the ending  time of current interval.
At the end stack contains the merged intervals.


Time Complexity:



O(n*log(n)) where n is length of inputArray.



As we have to sort the interval array, followed by linear traversal, time complexity will be

O(n*log(n)) + O(n) → O(n*log(n)).



Auxiliary Space Used:



O(n) where n is length of inputArray.



Here we have used Stack. So, extra space is used other than that of inputArray. So, auxiliary space used is O(n). (Here we are ignoring auxiliary space used by inbuilt sort function for sorting n elements of inputArray because it is language specific like in java, it will take O(1) but in python it will take O(n)).



Space Complexity:



O(n) where n is length of inputArray.



For inputArray, it takes O(n) and auxiliary space used is O(n). So, O(n) + O(n) → O(n).



3) optimal_solution.java



Description:



Auxiliary space used in above approach is O(n). It can be reduced.

The idea remains same as discussed in previous approach. Sort the interval array in increasing order of starting point.

Once you have sorted intervals, you can combine all intervals in a linear traversal.

Following is the detailed step by step algorithm:

Let last be the last interval of non overlapping intervals. last=0.

Iterating over inputArray, starting from second interval (1<=i<=n-1)

Check if inputArray[i] is overlapping with inputArray[last]
If overlapping, merge inputArray[i] and inputArray[last], For merging them, it is sufficient to update only endpoint of inputArray[last] as it is guaranteed that starting point of inputArray[last] <= starting point of inputArray[i][0] as array is sorted by starting point.
If non overlapping, we increment last and moving on, inputArray[i] is the new interval under test of overlapping with following intervals.
repeat step 1 for i=i+1.


Time Complexity:



O(n*log(n)) where n is length of inputArray.



As we have to sort the interval array, followed by linear traversal, time complexity will be

O(n*log(n)) + O(n) → O(n*log(n)).



Auxiliary Space Used:



O(1).



Here, all updation can be done in inputArray only. So, no extra space is used. (Here we are ignoring auxiliary space used by inbuilt sort function for sorting n elements of inputArray because it is language specific like in java, it will take O(1) but in python it will take O(n)).



Space Complexity:



O(n) where n is length of inputArray.



For inputArray, it takes O(n) and auxiliary space used is O(1). So, O(n) + O(1) → O(n).

