Populate Sibling Pointers



Problem Statement:



Given a binary tree, populate nextRight pointers in each node and return the root of the tree.



Input/Output Format For The Function:



Input format:



There is only one argument named root denoting the root of the input tree.



Output format:



Return the root of the tree after populating nextRight pointers.



Input/Output Format For The Custom Input:



Input Format:



line number 1: <noOfNodes> denoting number of nodes of the tree.

line number 2: <noOfNdoes space seprated integers> denoting the values of the nodes. Please make sure there are not leading or trailing spaces and between two integers there must be a single space.

line number 3: <rootIndex> denoting the root of the tree. value of rootIndex must be between -1 to noOfNodes-1

line number 4: <noOfEdges> denoting the number of edges of the tree

next noOfEdges line: <parentNodeIndex><space><childNodeIndex><space><leftOrRightFlag>

Here <parentNodeIndex> and <childNodeIndex> are the node indexes ranging from 0 to noOfNodes-1. <leftOrRighFlag> is either "L" or "R" (without quotes) denoting the left or right child where "L" stands for left child and "R" stands for right child.



Raw input of sample:

7

1 2 3 4 5 6 7

0

6

0 1 L

0 2 R

1 3 L

1 4 R

2 5 L

2 6 R



Output Format:



line number 1: <noOfNodes> denoting number of nodes of the tree.

line number 2: <noOfNdoes space seprated integers> denoting the values of the nodes. Please make sure there are not leading or trailing spaces and between two integers there must be a single space.

line number 3: <noOfNdoes space seprated string> denoting the values of the next right node. If there are no next right node then print the string "null" without quote. Please make sure there are not leading or trailing spaces and between two integers there must be a single space.

line number 4: <rootIndex> denoting the root of the tree. value of rootIndex must be between -1 to noOfNodes-1

line number 5: <noOfEdges> denoting the number of edges of the tree

next noOfEdges line: <parentNodeIndex><space><childNodeIndex><space><leftOrRightFlag>

Here <parentNodeIndex> and <childNodeIndex> are the node indexes ranging from 0 to noOfNodes-1. <leftOrRighFlag> is either "L" or "R" (without quotes) denoting the left or right child where "L" stands for left child and "R" stands for right child.



Raw output of sample:

7

1 2 3 4 5 6 7

null 3 null 5 6 7 null

0

6

0 1 L

0 2 R

1 3 L

1 4 R

2 5 L

2 6 R



Constraints:



0 <= number of nodes <= 100000
1 <= values stored in the nodes <= 10^9


Sample Test Case:



Sample Input:



../../../../../Desktop/Screen%20Shot%202019-02-14%20at%204.5



Sample Output:



../../../../../Desktop/Screen%20Shot%202019-02-14%20at%204.5



Explanation:

There are three levels in the input tree. If we write the node values level wise then we get:

Level 1: 1

Level 2: 2, 3

Leve 3: 4, 5, 6, 7



In first level there is only one node. So, next right of node having value 1 is null.

In second level, there are 2 nodes. Left most nodeâ€™s next right pointer is right most node.

In third level, there are 4 nodes. Second node is next right of first node, third node is next right to second node and fourth node is next right of third node.



Tree node structure:



Class TreeNode {

int val;

TreeNode left_ptr;

TreeNode right_ptr;

}