Largest BST



Problem Statement:



Given a binary tree, find the largest Binary Search Tree (BST), where largest means BST with largest number of nodes in it. The largest BST must include all of its descendants.



Input/Output Format For The Function:



Input format:



There is only one argument named root denoting the root of the input tree.



Output format:



Return an integer denoting the size of the largest BST.



Input/Output Format For The Custom Input:



Input Format:



line number 1: <noOfNodes> denoting number of nodes of the tree.

line number 2: <noOfNdoes space seprated integers> denoting the values of the nodes. Please make sure there are not leading or trailing spaces and between two integers there must be a single space.

line number 3: <rootIndex> denoting the root of the tree. value of rootIndex must be between -1 to noOfNodes-1

line number 4: <noOfEdges> denoting the number of edges of the tree

next noOfEdges line: <parentNodeIndex><space><childNodeIndex><space><leftOrRightFlag>

Here <parentNodeIndex> and <childNodeIndex> are the node indexes ranging from 0 to noOfNodes-1. <leftOrRighFlag> is either "L" or "R" (without quotes) denoting the left or right child where "L" stands for left child and "R" stands for right child.



Raw input of sample:

7

1 3 5 2 4 6 7

0

6

0 1 L

0 2 R

1 3 L

1 4 R

2 5 L

2 6 R



Output Format:



An integer denoting the size of the largest BST.



Raw output of sample:

3



Constraints:

0 <= number of nodes <= 100000
1 <= values stored in the nodes <= 10^9


Sample Test Case:



Sample Input:



../../../../../Desktop/Screen%20Shot%202019-02-17%20at%2011.3



Sample Output:



3



Explanation:



In the input tree, left subtree of node 1 is a BST. It has 3 nodes and this is the largest BST. So, result is 3.



Tree node structure:



Class TreeNode {

int val;

TreeNode left_ptr;

TreeNode right_ptr;

}